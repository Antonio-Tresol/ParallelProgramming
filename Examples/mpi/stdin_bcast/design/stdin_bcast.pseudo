procedure main:
  declare values as a dynamic array of float
  declare value_count := 0

  if process_number = 0 then
    declare value := 0
    while can_read(stdin) do
      append(values, value)
    end while

    value_count := count(values)
  end if

  // Send a variable or array from the source process to the rest
  // we use broadcast to send the same value to all processes
  // it is super natural of computer networks to send the same information to many places
  // so we can just use broadcast and let all the processes receive the same information
  // the parameter for broadcas in MPI are the data to send, the number of elements, the type of the data and the origin process
  broadcast(&value_count, 1, 0)
  resize(values, value_count)
  // there is no specific funtion to receive from a broadcast, as broadcast is a send and receive at the same time
  // that is why we use the same function to send and receive, and we can get rid of the conditions
  // we use before to check if we are the source process or not
  broadcast(&values, count(values), 0)

  for index := 0 to count(values) do
    print(process_number, ": ", index, ": ", values[index])
  end for
end procedure