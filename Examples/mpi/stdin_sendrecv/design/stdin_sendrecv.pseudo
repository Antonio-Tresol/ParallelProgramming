procedure main:
  declare values as a dynamic array of float // we declare an array of float
  declare value_count := 0 // we declare a counter for the array
  // this is a local variable for each process   k   
  // all reading must be done by the main thread
  if process_number = 0 then
    declare value := 0
    // while we can read values from the input channel
    while can_read(stdin) do
      // we read the value and add it to the array
      append(values, value)
    end while

    value_count := count(values) // we count the number of values
    // know we have targets to send the values to
    for target := 1 to process_count do
      // we send the number of values to the target
      //so it can allocate the array
      // and then we send the the array itself
      send(&value_count, 1, target)
      send(&values, count(values), target)
    end
  else // all other threads will receive the values and print them
  // we receive the number of values
    receive(&value_count, 1, 0)
    // we allocate the array
    resize(values, value_count)
    // we receive the values and store them in the array
    receive(&values, value_count, 0)
  end if

  for index := 0 to count(values) do
    print(process_number, ": ", index, ": ", values[index])
  end for
end procedure