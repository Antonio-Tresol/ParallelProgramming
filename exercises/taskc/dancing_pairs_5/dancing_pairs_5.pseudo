//  Copyright  2022 A.Badilla Olivas GNU GENERAL PUBLIC LICENSe
procedure main():
  int pairLimit := read_int() //  Read the pair limit
  // we create the semaphores for man and women, one for sincronization and one for the limit of pairs
  semaphoreMan := create_semaphore(0)
  semaphoreWoman := create_semaphore(0)
  dancingSemaphore := create_semaphore(0)
  danceLimit := create_semaphore(pairLimit * 2) 
  shared real danceTimeLimit := read_real() // read the minimum time each dancer will dance
  real danceTime := random(1000) // set a random duration for all dance
  private timeElapsed := 0 
	while true:
		case read_char() of:
			'M':= create_thread(male)
			'W':= create_thread(female)
			EOF:= return
  end while 
end procedure

procedure male():
  while timeElapsed < danceTimeLimit do:
    // This ensures that there's at least one woman waiting
    signal(semaphoreWoman)  //  Signal the woman semaphore
    wait(semaphoreMan)  //  Wait for the man semaphore
    wait(dancingSemaphore)  //  Wait for the dancing semaphore
    wait(danceLimit)  //  Wait for the dance limit semaphore
    dance(danceTime)
    timeElapsed := timeElapsed + danceTime
    signal(danceLimit) //  Signal the dance limit semaphore
  end while
end procedure 

procedure female():
  while timeElapsed < danceLimit do:
    // This ensures that there's at least one man waiting
    signal(semaphoreMan)  //  Signal the semaphore
    wait(semaphoreWoman)  //  Wait for the semaphore
    signal(dancingSemaphore)  //  Signal the semaphore
    signal(dancingSemaphore)  //  Signal the semaphore
    wait(dancingSemaphore)  //  Wait for the semaphore
    wait(danceLimit)  //  Wait for the semaphore
    dance(danceTime)
    timeElapsed := timeElapsed + danceTime
    signal(danceLimit) //  Signal the semaphore
  end while
end procedure